

Now I have added ASSERT(), and ASSERTF(): use them - scan all the functions. == IMPORTANT!!

Resource:
    - Check -> PROBABLY

Texture:
    - Parse texture atlas -

Renderer:
    - Implement batch rendering
    - Use global vao
    - struct EZBatchRenderer;
    -  FOR NOW, (until a struct EZRenderer struct is implemented and contains w and h) pass w and h as params. (BAD)
    - also change the orth matrix based on w and h (callback funcs)

Sprite:
    - ASSERTION!

Log:
    - DEBUG_ENABLED doesn't work

Camera:
    - Move camera by keyboard input

Input:
    - implement

Scene:
    - have camera - yes
    - bind the renderer - important
    - gameobjs => uids - access them using their own unique ids;

Renderer:
    - no need? unless a batch renderer is implemented
    - also no need to have a sprite parameter for the renderScene function, but I have not implemented linked lists/vectors yet.
    - in the renderScene function render all sprites by calling their own renderSprite functions.

Also:
    - Move sprite by keyboard input, not the CAMERA!!


Now, the scene accepts only 1 sprite - change it to multiple sprites.

Free more scene members - as you go.

ALSO DEFINE EZAPI - dllimport - _WIN32, dllexport - _WIN32, __attribute__(visibility("default")) - GNUC for any functions that are going to be exported to dll

SHADER INTEGRATION WITH THE ACTUAL API

CONVERT ARR VECS TO STRUCT VECS

IFDEF __CPLUSPLUS impl on all headers!!

MOVEMENT IS KINDA SLOPPY THO - SOLVED BY USING GLFWGETKEY

IMPROVE INPUT API

STBI SET FLIP 0????????? WHAT HAPPENED TO ALL TRANSFORMS?

SCRIPT SUPPORT WORKS YEYYYYUY
BUT IT ONLY SUPPORTS UNIX MACHINES NOW


ALSO FOR WINDOW HINTS USE TERMIOS LIKE STRUTCURE, KEANING FLIP THE BITS OF E.G. RESIZABLE lmaoo thats going to be crazy

CGLM MATRIX TRANSLATION HAS A FN WEIRDO BUG AND THATS VERY ANNOYING AND COST ME 2 DAYS TO FIND
INSTEAD OF CGLM USE YOUR OWN TRANSLATION (ADD METHOD)


FIXME:
    - None (thankfully)